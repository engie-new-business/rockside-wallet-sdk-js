import * as hasher from '../src/hash';

describe('executeMessageHash', () => {
  it('should return the correct hash for the execute transaction', () => {
    const hash = hasher.executeMessageHash(
      { chainId: 3, verifyingContract: '0xDb45eAB135582c7e7852a8E890B4495c9C1D822d' },
      {
        signer: '0x74f1a7370c8ed980b2fa53d25999931209b25f1c',
        to: '0x0000000000000000000000000000000000000000',
        value: 0,
        data: '0x12',
        nonce: 0
      }
    );

    expect(hash.toString('hex')).toEqual('006c0f307dfa8fb3871cd5a4f9df21deb4f0301d4db04c582aea4086ffb018a8');
  });

  it('should return the correct hash for the execute transaction with empty data', () => {
    const hash = hasher.executeMessageHash(
      { chainId: 3, verifyingContract: '0xDb45eAB135582c7e7852a8E890B4495c9C1D822d' },
      {
        signer: '0x74f1a7370c8ed980b2fa53d25999931209b25f1c',
        to: '0x0000000000000000000000000000000000000000',
        value: 0,
        data: '',
        nonce: 0
      }
    );

    expect(hash.toString('hex')).toEqual('9973277da26cf31f7beeff11652741b9b838d66593215068b59d5fe373689c3c');
  });
});

describe('deployMessageHash', () => {
  it('should return the correct hash for the dpeloy transaction', () => {
    const hash = hasher.deployMessageHash(
      { chainId: 3, verifyingContract: '0x1C2D90b013F66c20C0E3eabAC2Fd0FA2127b0283' },
      {
        signer: '0x9364733aab92a0720acf114a8b479ce85b8c208e',
        value: 0,
        initCode: '0x608060405234801561001057600080fd5b5060405161099e38038061099e8339818101604052602081101561003357600080fd5b50516001600160a01b0381161561006b576001600160a01b0381166000908152600160208190526040909120805460ff191690911790555b506109238061007b6000396000f3fe60806040526004361061004a5760003560e01c80630d392cd91461008257806370ae92d2146100d157806376e4b67a146101165780637f9ec70b146102715780639b19251a14610344575b60408051348152905133917f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874919081900360200190a2005b34801561008e57600080fd5b506100bd600480360360408110156100a557600080fd5b506001600160a01b0381351690602001351515610377565b604080519115158252519081900360200190f35b3480156100dd57600080fd5b50610104600480360360208110156100f457600080fd5b50356001600160a01b031661042f565b60408051918252519081900360200190f35b34801561012257600080fd5b5061026f600480360360a081101561013957600080fd5b81019060208101813564010000000081111561015457600080fd5b82018360208201111561016657600080fd5b8035906020019184600183028401116401000000008311171561018857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092956001600160a01b0385358116966020870135909116956040810135955091935091506080810190606001356401000000008111156101fa57600080fd5b82018360208201111561020c57600080fd5b8035906020019184600183028401116401000000008311171561022e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610441945050505050565b005b34801561027d57600080fd5b506101046004803603608081101561029457600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156102cf57600080fd5b8201836020820111156102e157600080fd5b8035906020019184600183028401116401000000008311171561030357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061061d945050505050565b34801561035057600080fd5b506100bd6004803603602081101561036757600080fd5b50356001600160a01b0316610717565b3360009081526001602052604081205460ff166103c55760405162461bcd60e51b81526004018080602001828103825260358152602001806108ba6035913960400191505060405180910390fd5b6001600160a01b038316600081815260016020908152604091829020805460ff191686151590811790915582519384529083015280517f08b2c0469ecd1d7a21d7e1492f0fc75fc7e8e0fa4fdf4275949c90875f5ebdf59281900390910190a15060015b92915050565b60006020819052908152604090205481565b600061044f8585858561061d565b6001600160a01b038616600090815260208190526040902080546001019055905061047a818761072c565b6104b55760405162461bcd60e51b815260040180806020018281038252602f81526020018061088b602f913960400191505060405180910390fd5b60006104c2858585610873565b90507f19d86a465a6ec0a79256ef68e21ae91b4143a84f9f11b03b3b7e69b1fd052f58878787878787876040518080602001886001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b03168152602001868152602001806020018581526020018415151515815260200183810383528a818151815260200191508051906020019080838360005b8381101561057357818101518382015260200161055b565b50505050905090810190601f1680156105a05780820380516001836020036101000a031916815260200191505b50838103825286518152865160209182019188019080838360005b838110156105d35781810151838201526020016105bb565b50505050905090810190601f1680156106005780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a150505050505050565b600030858585856000808b6001600160a01b03166001600160a01b031681526020019081526020016000205460405160200180876001600160a01b03166001600160a01b031660601b8152601401866001600160a01b03166001600160a01b031660601b8152601401856001600160a01b03166001600160a01b031660601b815260140184815260200183805190602001908083835b602083106106d25780518252601f1990920191602091820191016106b3565b51815160209384036101000a6000190180199092169116179052920193845250604080518085038152938201905282519201919091209b9a5050505050505050505050565b60016020526000908152604090205460ff1681565b60008060008084516041146107475760009350505050610429565b50505060208201516040830151606084015160001a601b81101561076957601b015b8060ff16601b1415801561078157508060ff16601c14155b156107925760009350505050610429565b6001600060018860405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c018281526020019150506040516020818303038152906040528051906020012084878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610841573d6000803e3d6000fd5b505060408051601f1901516001600160a01b03168352602083019390935250016000205460ff16935061042992505050565b600080600083516020850186885af194935050505056fe426f756e63657250726f78793a3a666f7277617264205369676e6572206973206e6f742077686974656c6973746564426f756e63657250726f78793a3a75706461746557686974656c697374204163636f756e74204e6f742057686974656c6973746564a265627a7a723158205db03f7a968753e9f0c13a84e9a2750a11b1633d13280fd20f1aa483d549d3f564736f6c634300050b0032000000000000000000000000bcc1ef39e5af7f20ad314e6d6562eba2c950295b',
        salt: 0x1,
        nonce: 0
      }
    );

    expect(hash.toString('hex')).toEqual('f841d93adfb0332145f8bb618705773dadf51e359a59fdc3629df5bc378dcfdf');
  });
});

describe('executeMessageTypedData', () => {
  it('should return the typed data', () => {
    const typedData = hasher.executeMessageTypedData(
      { chainId: 3, verifyingContract: '0xDb45eAB135582c7e7852a8E890B4495c9C1D822d' },
      {
        signer: '0x74f1a7370c8ed980b2fa53d25999931209b25f1c',
        to: '0x0000000000000000000000000000000000000000',
        value: 0,
        data: '0x12',
        nonce: 0
      }
    );

    expect(typedData).toEqual({
      domain: {
        chainId: 3,
        verifyingContract: '0xDb45eAB135582c7e7852a8E890B4495c9C1D822d',
      },
      message: {
        signer: '0x74f1a7370c8ed980b2fa53d25999931209b25f1c',
        to: '0x0000000000000000000000000000000000000000',
        value: 0,
        data: '0x12',
        nonce: 0
      },
      primaryType: 'TxMessage',
      types: {
        TxMessage: [
          { name: "signer", type: "address" },
          { name: "to", type: "address" },
          { name: "value", type: "uint256" },
          { name: "data", type: "bytes" },
          { name: "nonce", type: "uint256" },
        ],
        EIP712Domain: [
          { name: 'verifyingContract', type: 'address' },
          { name: 'chainId', type: 'uint256' }
        ],
      },
    });
  });
});

describe('deployMessageTypedData', () => {
  it('should return the typed data', () => {
    const typedData = hasher.deployMessageTypedData(
      { chainId: 3, verifyingContract: '0xDb45eAB135582c7e7852a8E890B4495c9C1D822d' },
      {
        signer: '0x74f1a7370c8ed980b2fa53d25999931209b25f1c',
        value: 0,
        salt: 12,
        initCode: '0x12',
        nonce: 0
      }
    );

    expect(typedData).toEqual({
      domain: {
        chainId: 3,
        verifyingContract: '0xDb45eAB135582c7e7852a8E890B4495c9C1D822d',
      },
      message: {
        signer: '0x74f1a7370c8ed980b2fa53d25999931209b25f1c',
        value: 0,
        salt: 12,
        initCode: '0x12',
        nonce: 0
      },
      primaryType: 'Create2Message',
      types: {
        Create2Message: [
          { name: "signer", type: "address" },
          { name: "value", type: "uint256" },
          {name: "salt", type: "uint256"},
          {name: "initCode", type: "bytes"},
          { name: "nonce", type: "uint256" },
        ],
        EIP712Domain: [
          { name: 'verifyingContract', type: 'address' },
          { name: 'chainId', type: 'uint256' }
        ],
      },
    });
  });
});
